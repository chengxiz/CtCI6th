package Q_6_10_Poison;

public class Question_Optimal {
	public static int findPoisonedBottle(ArrayList<Bottle> bottles, ArrayList<TestStrip> strips){
		runTests(bottles, strips);
		ArrayList<Integer> positive = getPositiveOnDay(strips,7);
		return setBits(positive);
	}

	/* Add bottle contents to test strips */
	public static void runTests(ArrayList<Bottle> bottles, ArrayList<TestStrip> testStrips){
		for (Bottle bottle: bottles) {
			int id = bottle.getId();
			int bitIndex = 0;
			while (id > 0) {
				if ((id & 1) == 1){
					testStrips.get(bitIndex).addDropOnDay(0, bottle);
				}
				bitIndex++;
				id >>=1;
			}
		}
	}

	/* Get test strips that are positive on a particular day. */
	public static ArrayList<Integer> getPositiveOnDay(ArrayList<TestStrip> testStrips, int day) {
		ArrayList<Integer> positive = new ArrayList<Integer>();
		for (TestStrip testStrip: testStrips){
			int id = testStrip.getId();
			if (testStrip.isPositiveOnDay(day)){
				positive.add(id);
			}
		}
		return positive;
	}

	/* Create number by sitting bits with indices specified in positive */
	public static int setBits(ArrayList<Integer> positive) {
		int id = 0;
		for (Integer bitIndex: positive) {
			id |= 1 << bitIndex;
		}
		return id;
	}
}
