package cracking.ch4;
import java.util.ArrayList;

import cracking.Library.*;

public class Q_4_7_BuildOrder {
	/* A helper function to insert projects with zero dependencies into the order 
	 * array, starting at index offset */
	public static int addNonDependent(ProjectTopo[] order, ArrayList<ProjectTopo> projects, int offset){
		for (ProjectTopo project : projects) {
			if (project.getNumberDependencies() == 0){
				order[offset] = project;
				offset++;
			}
		}
		return offset;
	}
	/* Return a list of the projects a correct build order. */
	public static ProjectTopo[] orderProjects(ArrayList<ProjectTopo> projects) {
		ProjectTopo[] order = new ProjectTopo[projects.size()];

		/* Add "roots" to the build order first. */
		int endOfList = addNonDependent(order, projects, 0);

		int toBeProcessed = 0;
		while (toBeProcessed < order.length) {
			ProjectTopo current = order[toBeProcessed];

			/* We have a circular dependency since there are no remaining projects with
			 * zero dependencies. */
			if(current==null){
				return null;
			}
			/* Remove myself as a dependency. */
			ArrayList<ProjectTopo> children = current.getChildren();
			for(ProjectTopo child: children) {
				child.decreaseDependencies();
			}

			/* Add children that have no one depending on them. */
			endOfList = addNonDependent(order, children, endOfList);
			toBeProcessed++;
		}
		return order;
	}

	static Graph_Q7 buildGraph_Q7(String[] projects, String[][] dependencies) {
		Graph_Q7 graph = new Graph_Q7();
		for (String project: projects){
			graph.getOrCreateProject(project);
		}

		for(String[] dependency: dependencies) {
			String first = dependency[0];
			String second = dependency[1];
			graph.addEdge(first,second);
		}
		return graph;
	}
	static /* Find a correct build order */
	ProjectTopo[] findBuildOrder(String[] projects, String[][] dependencies) {
		Graph_Q7 graph = buildGraph_Q7(projects, dependencies);
		return orderProjects(graph.getProjects());	
	}

	public static void main(String[] args) {
		String[] s = {"a","b","c","d","e","f","g"};
		String[][] d = {{"f","c"},{"f","b"},{"f","a"},{"c","a"},{"b","a"},{"b","e"},{"d","g"},{"g","d"}};
		ProjectTopo[] answer = findBuildOrder(s,d);
		for(ProjectTopo i : answer){
			System.out.println(i.getName());
		}
	}
}
