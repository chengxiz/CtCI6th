package cracking.ch4;
import cracking.Library.*;
import cracking.Library.Vertex.State;

public class Route2 {
	boolean search_BFS(Graph g, Vertex start, Vertex end) {
		if (start == end) return true;

		SinglyLinkedList<Vertex> queue = new SinglyLinkedList<Vertex>();

		for (Vertex u: g.getVertices()) {
			u.state = State.Unvisited;
		}
		start.state = State.Visiting;
		queue.add(start);
		Vertex u;
		while (!queue.isEmpty()) {
			u = queue.removeFirst();
			if ( u != null) {
				for (Vertex v: u.getAdjacent()) {
					if (v.state = State.Unvisited) {
						if (v == end) {
							return true;
						} else {
							v.state = State.Visiting;
							q.add(v);
						}
					}
				}
				u.state = State.Visited;
			}
		}
		return false;
	}
	public boolean search_DFS_Main(Graph g, Vertex start, Vertex end) {
		if (start == end) return true;
		//public static SinglyLinkedList<Vertex> queue = new SinglyLinkedList<Vertex>();
		for (Vertex u: g.getVertices()) {
			u.state = State.Unvisited;
		}
		boolean result = search_DFS_Recursion(start,end);
	}
	public boolean search_DFS_Recursion(Vertex start, Vertex end) {
		boolean found;
		start.state =State.Visiting;
		//queue.add(start);
		for (Vertex v : start.getAdjacent()) {
			if (v.state == State.Unvisited)					
				found = (found || search_DFS_Recursion(g,end));
		}
		start.state = State.Visited;
		if (start == end) return true;
		return found;
	}
	
}
